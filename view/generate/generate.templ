package generate

import (
    "mengzhao/view/layout"
    "mengzhao/view"
    "mengzhao/view/ui"
    "mengzhao/types"
    "fmt"
)

type ViewData struct {
   Images []types.Image
   FormParams FormParams
   FormErrors FormErrors
}

templ Index(data ViewData) {
    @layout.App(true) {
        // the h-calc belows makes we can scroll the page, using the height of the nav bar to calculate.
        <div class="flex w-full h-[calc(100vh-69px)]">
            <div class="w-[400px] border-r border-app p-4">
                @Form(data.FormParams, data.FormErrors)
            </div>
            @Gallery(data.Images)
        </div>
    }
}

templ Gallery(images []types.Image) {
    <div class="grid grid-cols-4 p-4 gap-4 w-full" id="gallery">
        for _, image := range images {
            @GalleryImage(image)
        }
    </div>
}

type FormParams struct {
    Prompt string
    Amount int
}

type FormErrors struct {
    Prompt string
    Amount string
    CreditsNeeded int
    UserCredits int
    Credits bool
}

templ Form(params FormParams, errors FormErrors) {
    // append the image after the child with beforeend.
    <form
        hx-post="/generate"
        hx-swap="outerHTML"
    >
        <div>
            <label class="form-control">
                <div class="label">
                    <span class="label-text">Enter your prompt</span>
                </div>
                <textarea  name="prompt" class="textarea textarea-bordered h-24" placeholder="A women in a blue bikini">
                    { params.Prompt }
                </textarea>
                if len(errors.Prompt) > 0 {
                    <div class="label">
                        <span class="label-text text-error">{ errors.Prompt }</span>
                    </div>
                }
            </label>
            <label class="form-control my-4">
                <div class="label">
                    <span class="label-text">How many images do you want?</span>
                </div>
                <div class="join">
                    for _, amount := range amounts {
                        if amount == view.String(params.Amount) {
                            <input class="join-item btn" value={ amount } type="radio" checked name="amount" aria-label={ amount } />
                        } else {
                            <input class="join-item btn" value={ amount } type="radio" name="amount" aria-label={ amount } />
                        }
                    }
                </div>
                if len(errors.Amount) > 0 {
                    <div class="label">
                        <span class="label-text text-error">{ errors.Amount }</span>
                    </div>
                }
            </label>
            <button class="btn btn-primary w-full mt-4">generate</button>
        </div>
    </form>
    if errors.Credits {
        @ui.CreditsModal(errors.CreditsNeeded, errors.UserCredits)
    }
}

templ GalleryImage(image types.Image) {
    if image.Status == types.ImageStatusCompleted {
        <div class="aspect-square rounded-xl cursor-pointer">
            <a href={ templ.URL(image.ImgLoc) } target="_blank">
                <img class="object-cover rounded-xl mouse-pointer" src={ image.ImgLoc }/>
            </a>
        </div>
    } else if image.Status == types.ImageStatusFailed {
        <div class="bg-red-100 aspect-[2/3] rounded-xl flex justify-center items-center">
            <div>
                <i class="fa-solid fa-bug text-5xl font-black text-slate-600"></i>
            </div>
        </div>
    } else if image.Status == types.ImageStatusPending {
        <div
            hx-get={ fmt.Sprintf("/generate/image/status/%d", image.ID) }
            hx-trigger="load delay:3s"
            class="bg-red-100 aspect-square rounded-xl flex justify-center items-center">
            <div>
                <span class="loading loading-spinner loading-lg text-gray-600"></span>
            </div>
        </div>
    }
}

var amounts = []string {
   "1", "2", "4", "8",
}